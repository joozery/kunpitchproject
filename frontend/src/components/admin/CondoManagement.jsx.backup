import React, { useState, useEffect } from 'react'
import { Card, CardContent, CardHeader, CardTitle } from '../ui/card'
import { Button } from '../ui/button'
import { Input } from '../ui/input'
import { 
  Table, 
  TableBody, 
  TableCell, 
  TableHead, 
  TableHeader, 
  TableRow 
} from '../ui/table'
import { 
  Building, 
  Plus, 
  Search, 
  Filter, 
  Edit, 
  Trash2, 
  Eye, 
  MapPin,
  Home as HomeIcon,
  Bath,
  Car,
  Calendar,
  DollarSign,
  Users,
  TrendingUp,
  Grid,
  Table as TableIcon,
  Loader2,
  Star,
  Heart
} from 'lucide-react'
import CondoForm from './CondoForm'
import { condoAPI } from '../../lib/api'
import { checkPermission, PERMISSIONS, PermissionGuard } from '../../lib/permissions'
import Swal from 'sweetalert2'

const CondoManagement = () => {
  const [condos, setCondos] = useState([])
  const [loading, setLoading] = useState(true)
  const [searchTerm, setSearchTerm] = useState('')
  const [filterStatus, setFilterStatus] = useState('all')
  const [viewMode, setViewMode] = useState('table')
  const [showAddForm, setShowAddForm] = useState(false)
  const [showEditForm, setShowEditForm] = useState(false)
  const [editingCondo, setEditingCondo] = useState(null)
  const [stats, setStats] = useState({
    total_condos: 0,
    for_sale: 0,
    for_rent: 0,
    both_status: 0,
    avg_price: 0,
    avg_rent_price: 0,
    avg_area: 0,
    total_views: 0,
  })
  const [updatingStatusId, setUpdatingStatusId] = useState(null)

  // Fetch condos from API
  useEffect(() => {
    const fetchData = async () => {
      try {
        setLoading(true)
        
        // Fetch condos
        const condosResponse = await condoAPI.getAll()
        if (condosResponse.success) {
          setCondos(condosResponse.data || [])
        } else {
          console.error('Failed to fetch condos:', condosResponse.message)
          setCondos([])
        }
        
        // Fetch statistics
        const statsResponse = await condoAPI.getStats()
        if (statsResponse.success) {
          const d = statsResponse.data || {}
          setStats({
            total_condos: d.total_condos || 0,
            for_sale: d.for_sale || 0,
            for_rent: d.for_rent || 0,
            both_status: d.both_status || 0,
            avg_price: d.avg_price || 0,
            avg_rent_price: d.avg_rent_price || 0,
            avg_area: d.avg_area || 0,
            total_views: d.total_views || 0,
          })
        } else {
          console.error('Failed to fetch stats:', statsResponse.message)
        }
        
      } catch (error) {
        console.error('Error fetching data:', error)
        setCondos([])
      } finally {
        setLoading(false)
      }
    }

    fetchData()
  }, [])

  const getStatusColor = (status) => {
    const colors = {
      'sale': 'bg-green-100 text-green-800',
      'rent': 'bg-blue-100 text-blue-800',
      'both': 'bg-purple-100 text-purple-800'
    }
    return colors[status] || 'bg-gray-100 text-gray-800'
  }

  const getStatusText = (status) => {
    const statusText = {
      'sale': 'ขาย',
      'rent': 'เช่า',
      'both': 'ขาย/เช่า'
    }
    return statusText[status] || status
  }

  const refreshStats = async () => {
    try {
      const statsResponse = await condoAPI.getStats()
      if (statsResponse.success) {
        const d = statsResponse.data || {}
        setStats({
          total_condos: d.total_condos || 0,
          for_sale: d.for_sale || 0,
          for_rent: d.for_rent || 0,
          both_status: d.both_status || 0,
          avg_price: d.avg_price || 0,
          avg_rent_price: d.avg_rent_price || 0,
          avg_area: d.avg_area || 0,
          total_views: d.total_views || 0,
        })
      }
    } catch (e) {
      // ignore
    }
  }

  const handleStatusChange = async (condo, newStatus) => {
    if (!newStatus || newStatus === condo.status) return
    try {
      setUpdatingStatusId(condo.id)
      await condoAPI.update(condo.id, { status: newStatus })
      setCondos(prev => prev.map(c => c.id === condo.id ? { ...c, status: newStatus } : c))
      await refreshStats()
      await Swal.fire('อัปเดตสถานะสำเร็จ', '', 'success')
    } catch (err) {
      console.error('Update status failed:', err)
      await Swal.fire('อัปเดตไม่สำเร็จ', err.message || 'เกิดข้อผิดพลาด', 'error')
    } finally {
      setUpdatingStatusId(null)
    }
  }

  const filteredCondos = condos.filter(condo => {
    const matchesSearch = condo.title.toLowerCase().includes(searchTerm.toLowerCase()) ||
                         condo.location.toLowerCase().includes(searchTerm.toLowerCase())
    const matchesFilter = filterStatus === 'all' || condo.status === filterStatus
    return matchesSearch && matchesFilter
  })

  const handleAddCondo = () => {
    setShowAddForm(true)
  }

  const handleEditCondo = (condo) => {
    setEditingCondo(condo)
    setShowEditForm(true)
  }

  const handleSaveCondo = (condoData) => {
    setShowAddForm(false)
    setShowEditForm(false)
    setEditingCondo(null)
    
    // Refresh the data after saving
    const refreshData = async () => {
      try {
        setLoading(true)
        
        // Fetch condos
        const condosResponse = await condoAPI.getAll()
        if (condosResponse.success) {
          setCondos(condosResponse.data || [])
        }
        
        // Fetch statistics
        const statsResponse = await condoAPI.getStats()
        if (statsResponse.success) {
          const d = statsResponse.data || {}
          setStats({
            total_condos: d.total_condos || 0,
            for_sale: d.for_sale || 0,
            for_rent: d.for_rent || 0,
            both_status: d.both_status || 0,
            avg_price: d.avg_price || 0,
            avg_rent_price: d.avg_rent_price || 0,
            avg_area: d.avg_area || 0,
            total_views: d.total_views || 0,
          })
        }
        
      } catch (error) {
        console.error('Error refreshing data:', error)
      } finally {
        setLoading(false)
      }
    }
    
    refreshData()
  }

  const handleDeleteCondo = async (condoId) => {
    const result = await Swal.fire({
      title: 'ยืนยันการลบ?',
      text: 'เมื่อลบแล้วจะไม่สามารถกู้คืนได้',
      icon: 'warning',
      showCancelButton: true,
      confirmButtonText: 'ลบ',
      cancelButtonText: 'ยกเลิก'
    })

    if (result.isConfirmed) {
      try {
        setLoading(true)
        await condoAPI.delete(condoId)
        await Swal.fire('ลบสำเร็จ', '', 'success')
        // Refresh after delete
        const condosResponse = await condoAPI.getAll()
        if (condosResponse.success) {
          setCondos(condosResponse.data || [])
        }
        const statsResponse = await condoAPI.getStats()
        if (statsResponse.success) {
          const d = statsResponse.data || {}
          setStats({
            total_condos: d.total_condos || 0,
            for_sale: d.for_sale || 0,
            for_rent: d.for_rent || 0,
            both_status: d.both_status || 0,
            avg_price: d.avg_price || 0,
            avg_rent_price: d.avg_rent_price || 0,
            avg_area: d.avg_area || 0,
            total_views: d.total_views || 0,
          })
        }
      } catch (err) {
        console.error('Error deleting condo:', err)
        await Swal.fire('ลบไม่สำเร็จ', err.message || 'เกิดข้อผิดพลาด', 'error')
      } finally {
        setLoading(false)
      }
    }
  }

  if (showAddForm) {
    return (
      <CondoForm 
        onBack={() => setShowAddForm(false)}
        onSave={handleSaveCondo}
      />
    )
  }

  if (showEditForm && editingCondo) {
    return (
      <CondoForm 
        condo={editingCondo}
        onBack={() => {
          setShowEditForm(false)
          setEditingCondo(null)
        }}
        onSave={handleSaveCondo}
        isEditing={true}
      />
    )
  }

  if (loading) {
    return (
      <div className="flex items-center justify-center h-64">
        <div className="flex items-center space-x-2">
          <Loader2 className="h-6 w-6 animate-spin text-blue-600" />
          <span className="text-gray-600 font-prompt">กำลังโหลดข้อมูล...</span>
        </div>
      </div>
    )
  }

  return (
    <div className="space-y-6">
      {/* Header */}
      <div className="flex items-center justify-between">
        <div>
          <h1 className="text-3xl font-bold text-gray-900 font-prompt">จัดการคอนโด</h1>
          <p className="text-gray-600 mt-1 font-prompt">จัดการข้อมูลคอนโดมิเนียมทั้งหมดในระบบ</p>
        </div>
        <div className="flex items-center space-x-4">
          <PermissionGuard permission={PERMISSIONS.PROPERTY_CREATE}>
            <Button
              onClick={handleAddCondo}
              className="bg-blue-600 hover:bg-blue-700 text-white font-prompt"
            >
              <Plus className="h-4 w-4 mr-2" />
              + เพิ่มคอนโด
            </Button>
          </PermissionGuard>
          
          <Button
            onClick={() => window.location.reload()}
            variant="outline"
            className="font-prompt"
          >
            <Loader2 className="h-4 w-4 mr-2" />
            รีเฟรช
          </Button>
        </div>
      </div>

      {/* Stats Cards */}
      <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6">
            {/* คอนโดทั้งหมด */}
            <Card className="bg-gradient-to-br from-blue-50 to-blue-100 border-blue-200">
              <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
                <CardTitle className="text-sm font-medium text-blue-700">
                  คอนโดทั้งหมด
                </CardTitle>
                <Building className="h-4 w-4 text-blue-600" />
              </CardHeader>
              <CardContent>
                <div className="text-2xl font-bold text-blue-800">{stats.total_condos || 0}</div>
                <p className="text-xs text-blue-600">รายการทั้งหมด</p>
              </CardContent>
            </Card>

            {/* ว่าง */}
            <Card className="bg-gradient-to-br from-green-50 to-green-100 border-green-200">
              <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
                <CardTitle className="text-sm font-medium text-green-700">
                   สำหรับขาย
                 </CardTitle>
                <HomeIcon className="h-4 w-4 text-green-600" />
              </CardHeader>
              <CardContent>
                <div className="text-2xl font-bold text-green-800">{stats.for_sale || 0}</div>
                <p className="text-xs text-green-600">พร้อมขาย/เช่า</p>
              </CardContent>
            </Card>

            {/* ขายแล้ว */}
            <Card className="bg-gradient-to-br from-orange-50 to-orange-100 border-orange-200">
              <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
                <CardTitle className="text-sm font-medium text-orange-700">
                   สำหรับเช่า
                 </CardTitle>
                <Users className="h-4 w-4 text-orange-600" />
              </CardHeader>
              <CardContent>
                <div className="text-2xl font-bold text-orange-800">{stats.for_rent || 0}</div>
                <p className="text-xs text-orange-600">รายการที่ขายแล้ว</p>
              </CardContent>
            </Card>

            {/* มูลค่ารวม */}
            <Card className="bg-gradient-to-br from-purple-50 to-purple-100 border-purple-200">
              <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
                <CardTitle className="text-sm font-medium text-purple-700">
                   ขาย/เช่า
                 </CardTitle>
                <TrendingUp className="h-4 w-4 text-purple-600" />
              </CardHeader>
              <CardContent>
                <div className="text-2xl font-bold text-purple-800">{stats.both_status || 0}</div>
                <p className="text-xs text-purple-600">มูลค่ารวมทั้งหมด</p>
              </CardContent>
            </Card>
      </div>

      {/* Filters and Search */}
      <Card>
        <CardContent className="p-6">
          <div className="flex flex-col lg:flex-row gap-4">
            <div className="flex-1">
              <div className="relative">
                <Search className="absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 h-4 w-4" />
                <Input
                  placeholder="ค้นหาคอนโด..."
                  value={searchTerm}
                  onChange={(e) => setSearchTerm(e.target.value)}
                  className="pl-10"
                />
              </div>
            </div>
            
            <div className="flex gap-4">
              <select
                value={filterStatus}
                onChange={(e) => setFilterStatus(e.target.value)}
                className="px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
              >
                <option value="all">สถานะทั้งหมด</option>
                <option value="available">ว่าง</option>
                <option value="sold">ขายแล้ว</option>
                <option value="rented">เช่าแล้ว</option>
                <option value="pending">รอดำเนินการ</option>
              </select>
              
              <div className="flex border border-gray-300 rounded-md">
                <button
                  onClick={() => setViewMode('table')}
                  className={`px-3 py-2 ${viewMode === 'table' ? 'bg-blue-600 text-white' : 'bg-white text-gray-600'}`}
                >
                  <TableIcon className="h-4 w-4" />
                </button>
                <button
                  onClick={() => setViewMode('grid')}
                  className={`px-3 py-2 ${viewMode === 'grid' ? 'bg-blue-600 text-white' : 'bg-white text-gray-600'}`}
                >
                  <Grid className="h-4 w-4" />
                </button>
              </div>
            </div>
          </div>
        </CardContent>
      </Card>

      {/* Condo List */}
      {viewMode === 'table' ? (
          <Card>
            <CardContent className="p-0">
              <Table>
                <TableHeader>
                  <TableRow>
                    <TableHead className="font-prompt">คอนโด</TableHead>
                    <TableHead className="font-prompt">ที่อยู่</TableHead>
                    <TableHead className="font-prompt">ราคา</TableHead>
                    <TableHead className="font-prompt">สถานะ</TableHead>
                    <TableHead className="font-prompt">ชั้น</TableHead>
                    <TableHead className="font-prompt">ขนาด</TableHead>
                    <TableHead className="font-prompt">จัดการ</TableHead>
                  </TableRow>
                </TableHeader>
                <TableBody>
                  {filteredCondos.map((condo) => (
                    <TableRow key={condo.id}>
                      <TableCell>
                        <div className="flex items-center space-x-3">
                          <img
                            src={condo.cover_image || (condo.images && condo.images[0])}
                            alt={condo.title}
                            className="w-12 h-12 object-cover rounded-lg"
                          />
                          <div>
                            <p className="font-medium text-gray-900 font-prompt">{condo.title}</p>
                            <p className="text-sm text-gray-500 font-prompt">
                              {condo.bedrooms} ห้องนอน • {condo.bathrooms} ห้องน้ำ
                            </p>
                          </div>
                        </div>
                      </TableCell>
                      <TableCell className="font-prompt">{condo.location}</TableCell>
                      <TableCell className="font-prompt">
                        <div>
                          <p className="font-medium text-gray-900">฿{Number(condo.price || 0).toLocaleString('th-TH')}</p>
                          {Number(condo.rent_price || 0) > 0 && (
                            <p className="text-sm text-gray-500">฿{Number(condo.rent_price).toLocaleString('th-TH')}/เดือน</p>
                          )}
                        </div>
                      </TableCell>
                      <TableCell>
                        <div className="flex items-center gap-2">
                          <span className={`inline-flex px-2 py-1 text-xs font-medium rounded-full font-prompt ${getStatusColor(condo.status)}`}>
                            {getStatusText(condo.status)}
                          </span>
                          <select
                            value={condo.status}
                            disabled={updatingStatusId === condo.id}
                            onChange={(e) => handleStatusChange(condo, e.target.value)}
                            className="px-2 py-1 border border-gray-300 rounded text-xs"
                          >
                            <option value="sale">ขาย</option>
                            <option value="rent">เช่า</option>
                            <option value="both">ขาย/เช่า</option>
                          </select>
                        </div>
                      </TableCell>
                      <TableCell className="font-prompt">{condo.floor || '-'}</TableCell>
                      <TableCell className="font-prompt">{Number(condo.area || 0)} ตร.ม.</TableCell>
                      <TableCell>
                        <div className="flex items-center space-x-2">
                          <Button variant="ghost" size="sm">
                            <Eye className="h-4 w-4" />
                          </Button>
                          <PermissionGuard permission={PERMISSIONS.PROPERTY_UPDATE}>
                            <Button 
                              variant="ghost" 
                              size="sm"
                              onClick={() => handleEditCondo(condo)}
                            >
                              <Edit className="h-4 w-4" />
                            </Button>
                          </PermissionGuard>
                          <PermissionGuard permission={PERMISSIONS.PROPERTY_DELETE}>
                            <Button 
                              variant="ghost" 
                              size="sm"
                              onClick={() => handleDeleteCondo(condo.id)}
                            >
                              <Trash2 className="h-4 w-4" />
                            </Button>
                          </PermissionGuard>
                        </div>
                      </TableCell>
                    </TableRow>
                  ))}
                </TableBody>
              </Table>
            </CardContent>
          </Card>
        ) : (
          <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
            {filteredCondos.map((condo) => (
              <Card key={condo.id} className="overflow-hidden">
                <div className="relative">
                  <img
                    src={condo.cover_image || (condo.images && condo.images[0])}
                    alt={condo.title}
                    className="w-full h-48 object-cover"
                  />
                  <div className="absolute top-2 left-2 flex items-center gap-2">
                    <span className={`px-2 py-1 rounded-full text-xs font-semibold ${getStatusColor(condo.status)}`}>
                      {getStatusText(condo.status)}
                    </span>
                    <select
                      value={condo.status}
                      disabled={updatingStatusId === condo.id}
                      onChange={(e) => handleStatusChange(condo, e.target.value)}
                      className="px-2 py-1 border border-gray-200 rounded text-xs bg-white/90"
                    >
                      <option value="sale">ขาย</option>
                      <option value="rent">เช่า</option>
                      <option value="both">ขาย/เช่า</option>
                    </select>
                  </div>
                  <div className="absolute top-2 right-2 flex space-x-1">
                    <Button variant="ghost" size="sm" className="bg-white/80 hover:bg-white">
                      <Heart className="h-4 w-4" />
                    </Button>
                    <Button variant="ghost" size="sm" className="bg-white/80 hover:bg-white">
                      <Star className="h-4 w-4" />
                    </Button>
                  </div>
                </div>
                
                <CardContent className="p-4">
                  <div className="space-y-3">
                    <div>
                      <h3 className="font-semibold text-gray-900 font-prompt">{condo.title}</h3>
                      <p className="text-sm text-gray-500 font-prompt">{condo.location}</p>
                    </div>
                    
                    <div className="flex items-center space-x-4 text-sm text-gray-600 font-prompt">
                      <div className="flex items-center space-x-1">
                        <HomeIcon className="h-4 w-4" />
                        <span>{condo.bedrooms}</span>
                      </div>
                      <div className="flex items-center space-x-1">
                        <Bath className="h-4 w-4" />
                        <span>{condo.bathrooms}</span>
                      </div>
                      <div className="flex items-center space-x-1">
                        <MapPin className="h-4 w-4" />
                        <span>{Number(condo.area || 0)} ตร.ม.</span>
                      </div>
                    </div>
                    
                    <div className="flex items-center justify-between">
                      <div>
                        <p className="font-semibold text-gray-900 font-prompt">฿{Number(condo.price || 0).toLocaleString('th-TH')}</p>
                        {Number(condo.rent_price || 0) > 0 && (
                          <p className="text-sm text-gray-500 font-prompt">฿{Number(condo.rent_price).toLocaleString('th-TH')}/เดือน</p>
                        )}
                      </div>
                      <div className="text-sm text-gray-500 font-prompt">
                        ชั้น {condo.floor || '-'}
                      </div>
                    </div>
                    
                    <div className="flex items-center justify-between pt-2 border-t">
                      <div className="text-sm text-gray-500 font-prompt">
                        {Number(condo.area || 0)} ตร.ม.
                      </div>
                      <div className="flex items-center space-x-2">
                        <Button 
                          variant="ghost" 
                          size="sm"
                          onClick={() => handleEditCondo(condo)}
                        >
                          <Edit className="h-4 w-4" />
                        </Button>
                        <Button 
                          variant="ghost" 
                          size="sm"
                          onClick={() => handleDeleteCondo(condo.id)}
                        >
                          <Trash2 className="h-4 w-4" />
                        </Button>
                      </div>
                    </div>
                  </div>
                </CardContent>
              </Card>
            ))}
          </div>
        )}
      </div>
    </div>
  )
}

export default CondoManagement