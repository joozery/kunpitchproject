import React, { useState, useEffect } from 'react';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from '@/components/ui/table';
import { projectApi } from '../../lib/projectApi';
import ProjectForm from './ProjectForm';
import Swal from 'sweetalert2';

const ProjectManagement = () => {
  const [projects, setProjects] = useState([]);
  const [showForm, setShowForm] = useState(false);
  const [editingProject, setEditingProject] = useState(null);
  const [searchTerm, setSearchTerm] = useState('');
  const [loading, setLoading] = useState(false);

  // ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÇ‡∏Ñ‡∏£‡∏á‡∏Å‡∏≤‡∏£
  useEffect(() => {
    fetchProjects();
  }, []);

  const fetchProjects = async () => {
    try {
      setLoading(true);
      console.log('üîÑ Fetching projects from API...');
      const response = await projectApi.getAll();
      console.log('‚úÖ Projects fetched:', response.data);
      setProjects(response.data || []);
    } catch (error) {
      console.error('‚ùå Error fetching projects:', error);
      
      Swal.fire({
        title: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î!',
        text: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÇ‡∏Ñ‡∏£‡∏á‡∏Å‡∏≤‡∏£',
        icon: 'error',
        confirmButtonText: '‡∏ï‡∏Å‡∏•‡∏á'
      });
    } finally {
      setLoading(false);
    }
  };

  const handleAddProject = () => {
    Swal.fire({
      title: '‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÇ‡∏Ñ‡∏£‡∏á‡∏Å‡∏≤‡∏£‡πÉ‡∏´‡∏°‡πà',
      text: '‡∏Ñ‡∏∏‡∏ì‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÇ‡∏Ñ‡∏£‡∏á‡∏Å‡∏≤‡∏£‡πÉ‡∏´‡∏°‡πà‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà?',
      icon: 'question',
      showCancelButton: true,
      confirmButtonColor: '#3085d6',
      cancelButtonColor: '#d33',
      confirmButtonText: '‡πÉ‡∏ä‡πà, ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏•‡∏¢!',
      cancelButtonText: '‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å'
    }).then((result) => {
      if (result.isConfirmed) {
        setEditingProject(null);
        setShowForm(true);
      }
    });
  };

  const handleEditProject = (project) => {
    Swal.fire({
      title: '‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÇ‡∏Ñ‡∏£‡∏á‡∏Å‡∏≤‡∏£',
      text: `‡∏Ñ‡∏∏‡∏ì‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÇ‡∏Ñ‡∏£‡∏á‡∏Å‡∏≤‡∏£ "${project.name_th}" ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà?`,
      icon: 'question',
      showCancelButton: true,
      confirmButtonColor: '#3085d6',
      cancelButtonColor: '#d33',
      confirmButtonText: '‡πÉ‡∏ä‡πà, ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÄ‡∏•‡∏¢!',
      cancelButtonText: '‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å'
    }).then((result) => {
      if (result.isConfirmed) {
        setEditingProject(project);
        setShowForm(true);
      }
    });
  };

  const handleDeleteProject = async (id) => {
    const result = await Swal.fire({
      title: '‡∏Ñ‡∏∏‡∏ì‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏•‡∏ö‡πÇ‡∏Ñ‡∏£‡∏á‡∏Å‡∏≤‡∏£‡∏ô‡∏µ‡πâ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà?',
      text: "‡∏Å‡∏≤‡∏£‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£‡∏ô‡∏µ‡πâ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡πÑ‡∏î‡πâ!",
      icon: 'warning',
      showCancelButton: true,
      confirmButtonColor: '#d33',
      cancelButtonColor: '#3085d6',
      confirmButtonText: '‡πÉ‡∏ä‡πà, ‡∏•‡∏ö‡πÄ‡∏•‡∏¢!',
      cancelButtonText: '‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å'
    });
    
    if (result.isConfirmed) {
      try {
        setLoading(true);
        console.log('üîÑ Deleting project:', id);
        await projectApi.delete(id);
        console.log('‚úÖ Project deleted:', id);
        
        setProjects(prev => prev.filter(project => project.id !== id));
        
        Swal.fire(
          '‡∏•‡∏ö‡πÅ‡∏•‡πâ‡∏ß!',
          '‡πÇ‡∏Ñ‡∏£‡∏á‡∏Å‡∏≤‡∏£‡∏ñ‡∏π‡∏Å‡∏•‡∏ö‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß',
          'success'
        );
      } catch (error) {
        console.error('‚ùå Error deleting project:', error);
        
        Swal.fire({
          title: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î!',
          text: `‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏•‡∏ö‡πÇ‡∏Ñ‡∏£‡∏á‡∏Å‡∏≤‡∏£: ${error.message}`,
          icon: 'error',
          confirmButtonText: '‡∏ï‡∏Å‡∏•‡∏á'
        });
      } finally {
        setLoading(false);
      }
    }
  };

  const handleSubmit = async (projectData) => {
    try {
      setLoading(true);
      if (editingProject) {
        // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡πÇ‡∏Ñ‡∏£‡∏á‡∏Å‡∏≤‡∏£
        console.log('üîÑ Updating project:', editingProject.id);
        const response = await projectApi.update(editingProject.id, projectData);
        console.log('‚úÖ Project updated:', response.data);
        
        // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï state projects ‡πÇ‡∏î‡∏¢‡∏£‡∏ß‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏î‡∏¥‡∏°‡∏Å‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡∏°‡πà
        setProjects(prev => prev.map(project => 
          project.id === editingProject.id 
            ? { 
                ...project, 
                ...response.data,
                // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ facilities ‡∏°‡∏µ‡πÉ‡∏ô response ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
                facilities: response.data.facilities || project.facilities || []
              }
            : project
        ));
        
        Swal.fire({
          title: '‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!',
          text: '‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡πÇ‡∏Ñ‡∏£‡∏á‡∏Å‡∏≤‡∏£‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß',
          icon: 'success',
          confirmButtonText: '‡∏ï‡∏Å‡∏•‡∏á'
        });
      } else {
        // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÇ‡∏Ñ‡∏£‡∏á‡∏Å‡∏≤‡∏£‡πÉ‡∏´‡∏°‡πà
        console.log('üîÑ Creating new project:', projectData);
        const response = await projectApi.create(projectData);
        console.log('‚úÖ Project created:', response.data);
        
        setProjects(prev => [response.data, ...prev]);
        
        Swal.fire({
          title: '‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!',
          text: '‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÇ‡∏Ñ‡∏£‡∏á‡∏Å‡∏≤‡∏£‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß',
          icon: 'success',
          confirmButtonText: '‡∏ï‡∏Å‡∏•‡∏á'
        });
      }
      setShowForm(false);
      setEditingProject(null);
    } catch (error) {
      console.error('‚ùå Error saving project:', error);
      
      Swal.fire({
        title: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î!',
        text: `‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÇ‡∏Ñ‡∏£‡∏á‡∏Å‡∏≤‡∏£: ${error.message}`,
        icon: 'error',
        confirmButtonText: '‡∏ï‡∏Å‡∏•‡∏á'
      });
    } finally {
      setLoading(false);
    }
  };

  const handleCancel = () => {
    Swal.fire({
      title: '‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡∏Å‡∏≤‡∏£‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£',
      text: '‡∏Ñ‡∏∏‡∏ì‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡∏Å‡∏≤‡∏£‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà? ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏Å‡∏£‡∏≠‡∏Å‡∏à‡∏∞‡∏´‡∏≤‡∏¢‡πÑ‡∏õ',
      icon: 'warning',
      showCancelButton: true,
      confirmButtonColor: '#d33',
      cancelButtonColor: '#3085d6',
      confirmButtonText: '‡πÉ‡∏ä‡πà, ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡πÄ‡∏•‡∏¢!',
      cancelButtonText: '‡πÑ‡∏°‡πà, ‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•'
    }).then((result) => {
      if (result.isConfirmed) {
        setShowForm(false);
        setEditingProject(null);
      }
    });
  };

  const filteredProjects = projects.filter(project =>
    project.name_th.toLowerCase().includes(searchTerm.toLowerCase()) ||
    project.name_en.toLowerCase().includes(searchTerm.toLowerCase()) ||
    project.developer.toLowerCase().includes(searchTerm.toLowerCase())
  );

  if (showForm) {
    return (
      <ProjectForm
        project={editingProject}
        onSubmit={handleSubmit}
        onCancel={handleCancel}
      />
    );
  }

  return (
    <div className="p-6">
      <div className="flex justify-between items-center mb-6">
        <h1 className="text-3xl font-bold">‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡πÇ‡∏Ñ‡∏£‡∏á‡∏Å‡∏≤‡∏£</h1>
        <Button onClick={handleAddProject} className="bg-blue-600 hover:bg-blue-700">
          + ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÇ‡∏Ñ‡∏£‡∏á‡∏Å‡∏≤‡∏£‡πÉ‡∏´‡∏°‡πà
        </Button>
      </div>

      {/* ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤ */}
      <div className="mb-6">
        <Input
          placeholder="‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡πÇ‡∏Ñ‡∏£‡∏á‡∏Å‡∏≤‡∏£..."
          value={searchTerm}
          onChange={(e) => setSearchTerm(e.target.value)}
          className="max-w-md"
        />
      </div>

      {/* ‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• */}
      <Card>
        <CardHeader>
          <CardTitle>‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÇ‡∏Ñ‡∏£‡∏á‡∏Å‡∏≤‡∏£‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î ({filteredProjects.length})</CardTitle>
        </CardHeader>
        <CardContent>
          {loading ? (
            <div className="text-center py-8">‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•...</div>
          ) : filteredProjects.length === 0 ? (
            <div className="text-center py-8 text-gray-500">
              {searchTerm ? '‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÇ‡∏Ñ‡∏£‡∏á‡∏Å‡∏≤‡∏£‡∏ó‡∏µ‡πà‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤' : '‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÇ‡∏Ñ‡∏£‡∏á‡∏Å‡∏≤‡∏£'}
            </div>
          ) : (
            <Table>
              <TableHeader>
                <TableRow>
                  <TableHead>‡∏ä‡∏∑‡πà‡∏≠‡πÇ‡∏Ñ‡∏£‡∏á‡∏Å‡∏≤‡∏£</TableHead>
                  <TableHead>‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó</TableHead>
                  <TableHead>‡∏ú‡∏π‡πâ‡∏û‡∏±‡∏í‡∏ô‡∏≤</TableHead>
                  <TableHead>‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞</TableHead>
                  <TableHead>‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏¢‡∏π‡∏ô‡∏¥‡∏ï</TableHead>
                  <TableHead>‡∏ó‡∏µ‡πà‡∏ï‡∏±‡πâ‡∏á</TableHead>
                  <TableHead>‡∏Å‡∏≤‡∏£‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£</TableHead>
                </TableRow>
              </TableHeader>
              <TableBody>
                {filteredProjects.map((project) => (
                  <TableRow key={project.id}>
                    <TableCell>
                      <div>
                        <div className="font-medium">{project.name_th}</div>
                        {project.name_en && (
                          <div className="text-sm text-gray-500">{project.name_en}</div>
                        )}
                      </div>
                    </TableCell>
                    <TableCell>{project.project_type}</TableCell>
                    <TableCell>{project.developer}</TableCell>
                    <TableCell>
                      <span className={`px-2 py-1 rounded-full text-xs ${
                        project.status === '‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏≠‡∏¢‡∏π‡πà' ? 'bg-green-100 text-green-800' :
                        project.status === '‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏Å‡πà‡∏≠‡∏™‡∏£‡πâ‡∏≤‡∏á' ? 'bg-yellow-100 text-yellow-800' :
                        project.status === 'Pre-sale' ? 'bg-blue-100 text-blue-800' :
                        'bg-gray-100 text-gray-800'
                      }`}>
                        {project.status}
                      </span>
                    </TableCell>
                    <TableCell>{project.total_units}</TableCell>
                    <TableCell>
                      <div className="text-sm">
                        <div>{project.address}</div>
                        <div className="text-gray-500">{project.district}, {project.province}</div>
                      </div>
                    </TableCell>
                    <TableCell>
                      <div className="flex space-x-2">
                        <Button
                          size="sm"
                          variant="outline"
                          onClick={() => handleEditProject(project)}
                        >
                          ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç
                        </Button>
                        <Button
                          size="sm"
                          variant="outline"
                          onClick={() => handleDeleteProject(project.id)}
                          className="text-red-600 hover:text-red-700"
                        >
                          ‡∏•‡∏ö
                        </Button>
                      </div>
                    </TableCell>
                  </TableRow>
                ))}
              </TableBody>
            </Table>
          )}
        </CardContent>
      </Card>
    </div>
  );
};

export default ProjectManagement; 